# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
load(dplyr)
load("dplyr")
load(library())
library("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
ncol(flights)
colnames(flights)
??flights
?flights
library(dplyr)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, delay = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
View(mutate(flights, delay = arr_delay - dep_delay))
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
delayed_during_flight <- mutate(flights, delay = arr_delay - dep_delay)
View(delayed_during_flight)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, desc(delay))
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
delay_during_flight <- arrange(delay_during_flight, desc(delay))
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
delay_during_flight <- mutate(flights, delay = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
delay_during_flight <- arrange(delay_during_flight, desc(delay))
View(delay_during_flight)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
delay_during_flight <- mutate(flights, delay = arr_delay - dep_delay) %<%
arrange(desc(delay))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
delay_during_flight <- mutate(flights, delay = arr_delay - dep_delay) %>%
arrange(desc(delay))
View(delay_during_flight)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
delay_during_flight <- flights %>%
mutate(delay = arr_delay - dep_delay) %>%
arrange(desc(delay))
# Make a histogram of the amount of time gained using the `hist()` function
hist(delay_during_flight$delay)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
delay_during_flight(na.rm = TRUE)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
delay_during_flight[na.rm = TRUE]
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(delay_during_flight$delay, na.rm = TRUE])
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(delay_during_flight$delay, na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights_to_SEA <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(origin, dest, delay)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
delay_during_flight <- flights %>%
mutate(delay = arr_delay - dep_delay) %>%
arrange(desc(delay))
# Make a histogram of the amount of time gained using the `hist()` function
hist(delay_during_flight$delay)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(delay_during_flight$delay, na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights_to_SEA <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(origin, dest, delay)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights_to_SEA <- delay_during_flight %>%
filter(origin == "JFK", dest == "SEA") %>%
select(origin, dest, delay)
View(flights_to_SEA)
View(flights_to_SEA)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights_to_SEA <- delay_during_flight %>%
filter(dest == "SEA") %>%
select(origin, dest, delay)
# On average, did flights to SeaTac gain or loose time?
summarize(flights_to_SEA, mean = mean(delay, na.rm = TRUE))
# On average, did flights to SeaTac gain or loose time?
summarise(flights_to_SEA, mean = mean(delay, na.rm = TRUE))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary <- delay_during_flight %>%
filter(origin == "JFK", dest == "SEA") %>%
summarise(
avg_time = mean(delay, na.rm = TRUE),
min_time = min(air_time, na.rm = TRUE),
max_time = max(air_time, na.rm = TRUE)
)
View(summary)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary <- delay_during_flight %>%
filter(origin == "JFK", dest == "SEA") %>%
summarise(
avg_time = mean(air_time, na.rm = TRUE),
min_time = min(air_time, na.rm = TRUE),
max_time = max(air_time, na.rm = TRUE)
)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
summarise(mean(dep_delay, na.rm = T)
View(dep_delay_by_month)
View(dep_delay_by_month)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(mean(dep_delay, na.rm = T))
View(dep_delay_by_month)
# Which month had the greatest average departure delay?
select(max(dep_delay_by_month$month))
# Which month had the greatest average departure delay?
select(dep_delay_by_month, max(dep_delay_by_month$month))
# Which month had the greatest average departure delay?
select(dep_delay_by_month$month, max(dep_delay_by_month$month))
View(dep_delay_by_month)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(delay = mean(dep_delay, na.rm = T))
View(dep_delay_by_month)
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, delay == max(delay)) %>%
select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(dep_delay_by_month)
View(flights)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
avg_arr_del <- flights %>%
group_by(dest) %>%
summarise(avg_arr_delay = mean(arr_delay, na.rm = T)) %>%
arrange(avg_arr_delay)
View(avg_arr_del)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
avg_arr_del <- flights %>%
group_by(dest) %>%
summarise(avg_arr_delay = mean(arr_delay, na.rm = T)) %>%
arrange(-avg_arr_delay)
# You can look up these airports in the `airports` data frame!
View(airports)
